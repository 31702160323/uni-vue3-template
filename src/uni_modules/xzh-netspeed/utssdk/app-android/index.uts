import { UTSAndroid } from "io.dcloud.uts";
import TrafficStats from 'android.net.TrafficStats'

class NetSpeedUtils {
	private static timer: number = 0;
	private static lastTotalReceiveBytes: Long = 0;
	private static lastTotalTransferBytes: Long = 0;
	private static callbackList: UTSCallback[] = [];
	
	public static setNetSpeedCallback(callback: UTSCallback) {
		this.callbackList.push(callback)
	}

	/**
	* 根据应用uid获取设备启动以来，该应用接收到的总字节数
	*
	* @param uid 应用的uid
	*/
	private static getTotalReceiveBytes(): Long {
		// let receiveBytes = TrafficStats.UNSUPPORTED.toLong()
		const receiveBytes = TrafficStats.getUidRxBytes(UTSAndroid.getAppContext()?.getApplicationInfo()?.uid as Int)
		// 当获取不到时，会返回TrafficStats.UNSUPPORTED
		return receiveBytes == TrafficStats.UNSUPPORTED.toLong() ? 0 : receiveBytes / 1024
	}

	/**
	* 根据应用uid获取设备启动以来，该应用传输的总字节数
	*
	* @param uid 应用的uid
	*/
	private static getTotalTransferBytes(): Long {
		// let transferBytes = TrafficStats.UNSUPPORTED.toLong()
		const transferBytes = TrafficStats.getUidTxBytes(UTSAndroid.getAppContext()?.getApplicationInfo()?.uid as Int)
		// 当获取不到时，会返回TrafficStats.UNSUPPORTED
		return transferBytes == TrafficStats.UNSUPPORTED.toLong() ? 0 : transferBytes / 1024
	}

	// // 每隔1秒计算网速
	public static startMeasuringNetSpeed() {
		if (this.timer.toInt() === 0) {
			this.timer = setInterval(() => {
				let nowTotalReceiveBytes = this.getTotalReceiveBytes()
				let nowTotalTransferBytes = this.getTotalTransferBytes()

				let downloadSpeed = nowTotalReceiveBytes - this.lastTotalReceiveBytes
				let uploadSpeed = nowTotalTransferBytes - this.lastTotalTransferBytes

				this.lastTotalReceiveBytes = nowTotalReceiveBytes
				this.lastTotalTransferBytes = nowTotalTransferBytes
				
				this.callbackList.forEach((callback) => {
					callback({downloadSpeed, uploadSpeed});
				})
			}, 1000)
		}
	}

	public static stopMeasuringNetSpeed() {
		clearInterval(this.timer)
		this.timer = 0
		this.callbackList = []
	}
}

export function startMeasuringNetSpeed(callback: UTSCallback) {
	NetSpeedUtils.setNetSpeedCallback(callback)
	NetSpeedUtils.startMeasuringNetSpeed()
}

export function stopMeasuringNetSpeed() {
	NetSpeedUtils.stopMeasuringNetSpeed()
}
